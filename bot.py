# bot.py
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç (aiogram) –∏ Flask WebApp –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.
README:
1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   pip install aiogram==2.25.1 Flask

2) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ –ø—Ä–∞–≤—å—Ç–µ config.py):
   - BOT_TOKEN: —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
   - ADMIN_IDS: —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–ø–∏—Å–æ–∫ admin ID, –Ω–∞–ø—Ä–∏–º–µ—Ä "123456789,987654321"
   - APP_URL: –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Replit URL), –Ω–∞–ø—Ä–∏–º–µ—Ä "https://my-repl.username.repl.co"

3) –ó–∞–ø—É—Å–∫:
   python bot.py

4) –û—Ç–∫—Ä—ã—Ç—å WebApp:
   - –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ APP_URL (–Ω–∞ Replit URL)
   - –ò–ª–∏ –≤ Telegram –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω" –≤ –±–æ—Ç–µ (–∫–æ–º–∞–Ω–¥–∞ /shop)

–û–ø–∏—Å–∞–Ω–∏–µ:
- –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–± –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
- –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ö—É–ø–∏—Ç—å" –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É.
- –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.
"""

import threading
import time
import logging
import re

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import BOT_TOKEN, ADMIN_IDS, APP_URL, FLASK_PORT
from webapp import app as flask_app  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
from database import get_products, get_product, place_bid, get_auctions, get_highest_bid, finish_auction
from admin import is_admin
import database

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ----- Aiogram setup -----
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
class BuyStates(StatesGroup):
    waiting_for_link = State()

# –£—Ç–∏–ª–∏—Ç—ã
def admin_notify_text_for_purchase(product_name, price, buyer, link):
    return f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\nüì¶ –¢–æ–≤–∞—Ä: {product_name}\nüí∞ –¶–µ–Ω–∞: {price}\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer}\nüîó –°—Å—ã–ª–∫–∞: {link}"

# ----- –ö–æ–º–∞–Ω–¥—ã -----
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç CSsaler ‚Äî –º–∞–≥–∞–∑–∏–Ω –∏ –∞—É–∫—Ü–∏–æ–Ω.\n\n" \
           "–ö–æ–º–∞–Ω–¥—ã:\n" \
           "/shop ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n" \
           "/auctions ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã\n" \
           "/buy <id> ‚Äî –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID\n\n" \
           f"–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å WebApp: {APP_URL}"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", url=APP_URL))
    await message.answer(text, reply_markup=kb)

@dp.message_handler(commands=['shop'])
async def cmd_shop(message: types.Message):
    prods = get_products(only_available=True)
    if not prods:
        await message.answer("‚ùó –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    for p in prods:
        text = f"üì¶ <b>{p['name']}</b>\n{p['description']}\nüí∞ –¶–µ–Ω–∞: {p['price']}\n–¢–∏–ø: {'üî´ –û—Ä—É–∂–∏–µ' if p['type']=='weapon' else 'üíº –ê–≥–µ–Ω—Ç'}"
        if p['type']=='weapon' and p['float_value']:
            text += f"\nüî¢ Float: {p['float_value']}"
        kb = types.InlineKeyboardMarkup(row_width=2)
        if p.get('link'):
            kb.add(types.InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç", url=p['link']))
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É" ‚Äî –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        if ADMIN_IDS:
            kb.add(types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"tg://user?id={ADMIN_IDS[0]}"))
        kb.add(types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{p['id']}"))
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("buy_"))
async def process_buy_callback(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split("_",1)[1])
    p = get_product(product_id)
    if not p:
        await callback_query.answer("‚ùó –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await bot.send_message(callback_query.from_user.id, f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{p['name']}</b>.\n–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç.", parse_mode="HTML")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM context id —Ç–æ–≤–∞—Ä–∞
    state = dp.current_state(user=callback_query.from_user.id)
    await state.update_data(product_id=product_id)
    await BuyStates.waiting_for_link.set()
    await callback_query.answer()

@dp.message_handler(state=BuyStates.waiting_for_link, content_types=types.ContentTypes.TEXT)
async def process_buy_link(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get("product_id")
    link = message.text.strip()
    p = get_product(product_id)
    if not p:
        await message.answer("‚ùó –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        await state.finish()
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ(—è)
    buyer = f"@{message.from_user.username}" if message.from_user.username else f"ID:{message.from_user.id}"
    text = admin_notify_text_for_purchase(p['name'], p['price'], buyer, link)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(int(admin_id), text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!")
    await state.finish()

# ----- –ê—É–∫—Ü–∏–æ–Ω—ã: –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ /auctions -----
@dp.message_handler(commands=['auctions'])
async def cmd_auctions(message: types.Message):
    auctions = get_auctions(only_active=True)
    if not auctions:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.")
        return
    for a in auctions:
        highest = get_highest_bid(a['id'])
        highest_str = f"{highest['amount']} ({highest['bidder_identifier']})" if highest else "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫"
        remaining = a['end_timestamp'] - int(time.time())
        minutes = remaining//60 if remaining>0 else 0
        text = f"üè∑ <b>{a['title']}</b>\n{a['description']}\n–°—Ç–∞—Ä—Ç: {a['start_price']} | –®–∞–≥: {a['step']}\n–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º: {highest_str}\n–û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω"
        await message.answer(text, parse_mode="HTML")

# ----- –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: /announce_auction_end —á—Ç–æ–±—ã —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) -----
@dp.message_handler(commands=['announce_auction_end'])
async def cmd_announce_end(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è –∞—É–∫—Ü–∏–æ–Ω—ã
    await message.answer("üîé –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤...")
    await check_and_finalize_auctions(send_messages=True)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# ----- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ -----
async def check_and_finalize_auctions(send_messages=False):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞—É–∫—Ü–∏–æ–Ω–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç—ë–∫ end_timestamp.
    –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî —Å–æ–æ–±—â–∞–µ—Ç –µ–º—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    import time
    now = int(time.time())
    with database.get_conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT * FROM auctions WHERE finished=0 AND end_timestamp<=?", (now,))
        rows = cur.fetchall()
        for row in rows:
            auction = dict(row)
            aid = auction['id']
            # –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é —Å—Ç–∞–≤–∫—É
            cur.execute("SELECT * FROM bids WHERE auction_id=? ORDER BY amount DESC, created_at ASC LIMIT 1", (aid,))
            best = cur.fetchone()
            if best:
                best = dict(best)
                winner_identifier = best['bidder_identifier']
                amount = best['amount']
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—é (–µ—Å–ª–∏ —ç—Ç–æ Telegram ID –∏–ª–∏ @username)
                # –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Telegram ID –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ID:123 or @username
                sent_to_winner = False
                try:
                    if str(winner_identifier).startswith("ID:"):
                        tid = int(str(winner_identifier).split("ID:")[1])
                        await bot.send_message(tid, f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∞—É–∫—Ü–∏–æ–Ω–µ <b>{auction['title']}</b>.\n–°—É–º–º–∞: {amount}", parse_mode="HTML")
                        sent_to_winner = True
                    elif str(winner_identifier).startswith("@"):
                        # –Ω–∞–π—Ç–∏ –ø–æ username ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ @username –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É (–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è)
                        # –ø—Ä–æ—Å—Ç–æ –æ–ø–æ–≤–µ—Å—Ç–∏–º –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —è–≤–ª—è–µ—Ç—Å—è —ç—Ç–æ—Ç username
                        sent_to_winner = False
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏—Ç–æ–≥
                result_text = f"üèÅ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\nüè∑ –õ–æ—Ç: {auction['title']}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_identifier}\n–°—Ç–∞–≤–∫–∞: {amount}"
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(int(admin_id), result_text)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º –∏—Ç–æ–≥ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")
            else:
                # –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(int(admin_id), f"‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω <b>{auction['title']}</b> –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.", parse_mode="HTML")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ: {e}")
            # –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            cur.execute("UPDATE auctions SET finished=1 WHERE id=?", (aid,))
        conn.commit()

# ----- Background thread –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ -----
def start_auction_checker(loop):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É–∫—Ü–∏–æ–Ω—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    import asyncio
    async def runner():
        while True:
            try:
                await check_and_finalize_auctions(send_messages=True)
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: %s", e)
            await asyncio.sleep(30)
    # –ó–∞–ø—É—Å–∫ –≤ event loop aiogram
    asyncio.run_coroutine_threadsafe(runner(), loop)

# ----- –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ -----
def run_flask():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (webapp.app) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # –í Replit –≤–∞–∂–Ω–æ —Å–ª—É—à–∞—Ç—å 0.0.0.0:PORT (Flask app –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ webapp.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç port 5000).
    flask_app.run(host="0.0.0.0", port=FLASK_PORT)

# ----- –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç–∞ -----
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("Flask WebApp –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª aiogram (polling)
    # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling ‚Äî –∑–∞–ø—É—Å—Ç–∏–º background checker, –æ–∂–∏–¥–∞—é—â–∏–π loop
    from aiogram import executor as aiogram_executor

    # –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º polling –ø–æ–ª—É—á–∏–º loop –∏ –∑–∞–ø—É—Å—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—â–∏–∫
    loop = dp.loop
    checker_thread = threading.Thread(target=start_auction_checker, args=(loop,), daemon=True)
    checker_thread.start()
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä—â–∏–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.")

    # –ó–∞–ø—É—Å–∫ Long Polling
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)...")
    aiogram_executor.start_polling(dp, skip_updates=True)
