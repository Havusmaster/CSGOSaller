# bot.py
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç Flask (webapp.app) –≤ —Ñ–æ–Ω–µ –∏ aiogram 3.x –±–æ—Ç–∞.
–í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –ø–æ–∫—É–ø–∫–∏ –æ—Ç—Å—ã–ª–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
"""

import asyncio
import logging
import threading
import time

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import TOKEN, ADMIN_IDS, APP_URL, FLASK_HOST, FLASK_PORT, AUCTION_CHECK_INTERVAL
import database
from webapp import app as flask_app
from admin import is_admin
from database import get_products, get_product, get_auctions, get_highest_bid, get_bids_for_auction, place_bid, finish_auction

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN)
dp = Dispatcher()

# -----------------------------
#  –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def format_purchase_text(name, price, buyer, link):
    return f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\nüì¶ –¢–æ–≤–∞—Ä: {name}\nüí∞ –¶–µ–Ω–∞: {price}\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer}\nüîó –°—Å—ã–ª–∫–∞: {link}"

# -----------------------------
#  –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# -----------------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", url=APP_URL)],
        [InlineKeyboardButton(text="‚öîÔ∏è –ê—É–∫—Ü–∏–æ–Ω—ã", callback_data="show_auctions")]
    ])
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CSsaler! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.message(Command(commands=["shop"]))
async def cmd_shop(message: types.Message):
    prods = get_products(only_available=True)
    if not prods:
        await message.answer("‚ùó –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    for p in prods:
        text = f"üì¶ <b>{p['name']}</b>\n{p['description']}\nüí∞ –¶–µ–Ω–∞: {p['price']}\n–¢–∏–ø: {'üî´ –û—Ä—É–∂–∏–µ' if p['type']=='weapon' else 'üíº –ê–≥–µ–Ω—Ç'}"
        if p['type']=='weapon' and p['float_value']:
            text += f"\nüî¢ Float: {p['float_value']}"
        kb = InlineKeyboardMarkup(row_width=2)
        if p.get('link'):
            kb.add(InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç", url=p['link']))
        if ADMIN_IDS:
            kb.add(InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=f"tg://user?id={ADMIN_IDS[0]}"))
        kb.add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy:{p['id']}"))
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

@dp.callback_query(lambda c: c.data and c.data.startswith("buy:"))
async def callback_buy(callback: types.CallbackQuery):
    # –§–æ—Ä–º–∞—Ç callback 'buy:{id}'
    pid = int(callback.data.split(":", 1)[1])
    p = get_product(pid)
    if not p:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω.")
        await callback.answer()
        return
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞)
    # –¢–∞–∫ –∫–∞–∫ aiogram3 –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π state, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dispatcher.storage,
    # –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–µ–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ user_data —á–µ—Ä–µ–∑ dispatcher.storage (–Ω–µ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ)
    # –ù–æ –ø—Ä–æ—â–µ: –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –ø–æ–º–µ—Ç–∏–º —Ç–µ–∫—Å—Ç
    await callback.message.answer(f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{p['name']}</b>.\n–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç.", parse_mode="HTML")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π product_id –≤ –ø—Ä–æ—Å—Ç–æ–º —Å–ª–æ–≤–∞—Ä–µ
    if not hasattr(dp, "waiting_for_purchase"):
        dp.waiting_for_purchase = {}
    dp.waiting_for_purchase[callback.from_user.id] = p['id']
    await callback.answer()

@dp.message()
async def handle_text(message: types.Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∫—É–ø–∫–∏ ‚Äî –æ–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É
    uid = message.from_user.id
    if hasattr(dp, "waiting_for_purchase") and uid in dp.waiting_for_purchase:
        pid = dp.waiting_for_purchase.pop(uid, None)
        p = get_product(pid)
        if not p:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        link = message.text.strip()
        buyer = f"@{message.from_user.username}" if message.from_user.username else f"ID:{message.from_user.id}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        text = format_purchase_text(p['name'], p['price'], buyer, link)
        for aid in ADMIN_IDS:
            try:
                await bot.send_message(int(aid), text)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s: %s", aid, e)
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!")
        return

    # –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ ‚Äî —ç—Ö–æ / –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await message.answer("‚úâÔ∏è –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω ‚Äî –Ω–∞–∂–º–∏—Ç–µ /shop –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ /start")

# -----------------------------
#  –ê—É–∫—Ü–∏–æ–Ω: –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ callback
# -----------------------------
@dp.callback_query(lambda c: c.data == "show_auctions")
async def show_auctions_cb(callback: types.CallbackQuery):
    auctions = get_auctions(only_active=True)
    if not auctions:
        await callback.message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.")
        await callback.answer()
        return
    for a in auctions:
        highest = get_highest_bid(a['id'])
        highest_str = f"{highest['amount']} ({highest['bidder_identifier']})" if highest else "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫"
        remaining = max(0, a['end_timestamp'] - int(time.time()))
        minutes = remaining // 60
        text = f"üè∑ <b>{a['title']}</b>\n{a['description']}\n–°—Ç–∞—Ä—Ç: {a['start_price']} | –®–∞–≥: {a['step']}\n–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º: {highest_str}\n–û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=APP_URL)]
        ])
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()

# -----------------------------
#  –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
# -----------------------------
async def check_and_finalize_auctions():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É–∫—Ü–∏–æ–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π."""
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤")
    while True:
        try:
            now = int(time.time())
            # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è –∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ
            with database.get_conn() as conn:
                cur = conn.cursor()
                cur.execute("SELECT * FROM auctions WHERE finished=0 AND end_timestamp<=?", (now,))
                rows = cur.fetchall()
                for row in rows:
                    auction = dict(row)
                    aid = auction['id']
                    # –ª—É—á—à–∞—è —Å—Ç–∞–≤–∫–∞
                    cur.execute("SELECT * FROM bids WHERE auction_id=? ORDER BY amount DESC, created_at ASC LIMIT 1", (aid,))
                    best = cur.fetchone()
                    if best:
                        best = dict(best)
                        winner_identifier = best['bidder_identifier']
                        amount = best['amount']
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ ID:123
                        try:
                            if str(winner_identifier).startswith("ID:"):
                                tid = int(str(winner_identifier).split("ID:")[1])
                                await bot.send_message(tid, f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω <b>{auction['title']}</b>.\n–°—É–º–º–∞: {amount}", parse_mode="HTML")
                        except Exception as e:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: %s", e)
                        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        result_text = f"üèÅ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\nüè∑ –õ–æ—Ç: {auction['title']}\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_identifier}\n–°—Ç–∞–≤–∫–∞: {amount}"
                        for admin in ADMIN_IDS:
                            try:
                                await bot.send_message(int(admin), result_text)
                            except Exception as e:
                                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º –∏—Ç–æ–≥: %s", e)
                    else:
                        # –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫
                        for admin in ADMIN_IDS:
                            try:
                                await bot.send_message(int(admin), f"‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω <b>{auction['title']}</b> –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.", parse_mode="HTML")
                            except Exception as e:
                                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ: %s", e)
                    # –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
                    cur.execute("UPDATE auctions SET finished=1 WHERE id=?", (aid,))
                conn.commit()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É–∫—Ü–∏–æ–Ω–æ–≤: %s", e)
        await asyncio.sleep(AUCTION_CHECK_INTERVAL)

# -----------------------------
#  –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ —Ñ–æ–Ω–µ
# -----------------------------
def run_flask_background():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ä–µ–∂–∏–º dev server ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã).
    # –ù–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ –º–æ–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å gunicorn, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
    logger.info("–ó–∞–ø—É—Å–∫ Flask WebApp –≤ —Ñ–æ–Ω–µ...")
    flask_app.run(host=FLASK_HOST, port=FLASK_PORT, threaded=True)

# -----------------------------
#  –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# -----------------------------
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–µ (thread)
    flask_thread = threading.Thread(target=run_flask_background, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
    asyncio.create_task(check_and_finalize_auctions())

    # –ó–∞–ø—É—Å–∫ aiogram polling
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ (aiogram 3.x)...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
