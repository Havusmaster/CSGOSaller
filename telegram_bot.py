import asyncio
import logging
import time
import re
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppData
from config import BOT_TOKEN, ADMIN_IDS, ADMIN_USERNAME, BOT_USERNAME
from database import DB_PATH
import sqlite3

logging.basicConfig(filename="bot.log", level=logging.INFO, format="%(asctime)s %(message)s")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def main_kb(user_id=None):
    if user_id in ADMIN_IDS:
        return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [
                KeyboardButton(
                    text="üõí –ú–∞–≥–∞–∑–∏–Ω",
                    web_app=WebAppInfo(url=f"https://csgosaller-1.onrender.com/?user_id={user_id}")
                )
            ]
        ])
    else:
        return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [
                KeyboardButton(
                    text="üõí –ú–∞–≥–∞–∑–∏–Ω",
                    web_app=WebAppInfo(url="https://csgosaller-1.onrender.com/")
                )
            ]
        ])

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"ID{user_id}"
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("product_"):
        try:
            product_id = int(args[1].replace("product_", ""))
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start product_{product_id} –¥–ª—è user_id: {user_id}, username: {username}")
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute('SELECT name, description, price, quantity, float_value, trade_ban, type FROM products WHERE id=? AND sold=0 AND quantity>0', (product_id,))
            prod = c.fetchone()
            if prod:
                float_text = f"Float: {prod[4]:.4f}" if prod[4] is not None and prod[6] == 'weapon' else "Float: N/A"
                ban_text = "Trade Ban: –î–∞" if prod[5] else "Trade Ban: –ù–µ—Ç"
                type_text = "–¢–∏–ø: –û—Ä—É–∂–∏–µ" if prod[6] == 'weapon' else "–¢–∏–ø: –ê–≥–µ–Ω—Ç"
                product_link = f"https://csgosaller-1.onrender.com/product/{product_id}"
                text = (f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]}\n"
                        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                        f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                        f"üî¢ {float_text}\n"
                        f"üö´ {ban_text}\n"
                        f"üéÆ {type_text}\n"
                        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_link}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
                admin_url = f"https://t.me/{ADMIN_USERNAME}" if not ADMIN_USERNAME.startswith('+') else f"https://t.me/{ADMIN_USERNAME}"
                await message.answer(text, reply_markup=ReplyKeyboardMarkup(
                    resize_keyboard=True,
                    keyboard=[
                        [KeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://csgosaller-1.onrender.com/shop"))]
                    ]
                ))
                user_link = f"@{username}" if message.from_user.username else f"https://t.me/+{user_id}"
                admin_text = (f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Ç–æ–≤–∞—Ä–µ!\n"
                              f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]} (ID: {product_id})\n"
                              f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                              f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                              f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                              f"üî¢ {float_text}\n"
                              f"üö´ {ban_text}\n"
                              f"üéÆ {type_text}\n"
                              f"üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://csgosaller-1.onrender.com/admin/product/{product_id}\n"
                              f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: –û–∂–∏–¥–∞–µ—Ç—Å—è...")
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, admin_text)
                        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID{admin_id} –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")
                c.execute('INSERT OR REPLACE INTO pending_requests (user_id, product_id, timestamp) VALUES (?, ?, ?)',
                          (user_id, product_id, int(time.time())))
                conn.commit()
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID{user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id}: {prod[0]}")
            else:
                await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=main_kb(user_id))
            conn.close()
        except Exception as e:
            if 'conn' in locals():
                conn.close()
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start product_{product_id}: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_kb(user_id))
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_kb(user_id))

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"ID{user_id}"
    
    if message.web_app_data:
        try:
            data = json.loads(message.web_app_data.data)
            action = data.get('action')
            product_id = data.get('product_id')
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ WebApp –æ—Ç user_id: {user_id}, username: {username}, action: {action}, product_id: {product_id}")
            
            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            
            if action == 'buy':
                product_link = data.get('product_link')
                c.execute('SELECT name, description, price, quantity, float_value, trade_ban, type FROM products WHERE id=? AND sold=0 AND quantity>0', (product_id,))
                prod = c.fetchone()
                
                if prod:
                    float_text = f"Float: {prod[4]:.4f}" if prod[4] is not None and prod[6] == 'weapon' else "Float: N/A"
                    ban_text = "Trade Ban: –î–∞" if prod[5] else "Trade Ban: –ù–µ—Ç"
                    type_text = "–¢–∏–ø: –û—Ä—É–∂–∏–µ" if prod[6] == 'weapon' else "–¢–∏–ø: –ê–≥–µ–Ω—Ç"
                    text = (f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]}\n"
                            f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                            f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                            f"üî¢ {float_text}\n"
                            f"üö´ {ban_text}\n"
                            f"üéÆ {type_text}\n"
                            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_link}\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
                    await message.answer(text, reply_markup=ReplyKeyboardMarkup(
                        resize_keyboard=True,
                        keyboard=[
                            [KeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://csgosaller-1.onrender.com/shop"))]
                        ]
                    ))
                    user_link = f"@{username}" if message.from_user.username else f"https://t.me/+{user_id}"
                    admin_text = (f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Ç–æ–≤–∞—Ä–µ!\n"
                                  f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]} (ID: {product_id})\n"
                                  f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                                  f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                                  f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                                  f"üî¢ {float_text}\n"
                                  f"üö´ {ban_text}\n"
                                  f"üéÆ {type_text}\n"
                                  f"üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://csgosaller-1.onrender.com/admin/product/{product_id}\n"
                                  f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: –û–∂–∏–¥–∞–µ—Ç—Å—è...")
                    for admin_id in ADMIN_IDS:
                        try:
                            await bot.send_message(admin_id, admin_text)
                            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID{admin_id} –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")
                    c.execute('INSERT OR REPLACE INTO pending_requests (user_id, product_id, timestamp) VALUES (?, ?, ?)',
                              (user_id, product_id, int(time.time())))
                    conn.commit()
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID{user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id}: {prod[0]}")
                else:
                    await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=main_kb(user_id))
                conn.close()
                return
            
            conn.close()
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_kb(user_id))
        except Exception as e:
            if 'conn' in locals():
                conn.close()
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_kb(user_id))
        return

    text = message.text.strip()
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT product_id FROM pending_requests WHERE user_id=? AND timestamp>?', (user_id, int(time.time()) - 300))
    request = c.fetchone()
    if request:
        product_id = request[0]
        product_link_match = re.search(r'https://csgosaller-1\.onrender\.com/product/\d+', text)
        trade_link_match = re.search(r'https://steamcommunity\.com/tradeoffer/.*', text)
        product_link = product_link_match.group(0) if product_link_match else None
        trade_link = trade_link_match.group(0) if trade_link_match else None
        c.execute('SELECT name, description, price, quantity, float_value, trade_ban, type FROM products WHERE id=?', (product_id,))
        prod = c.fetchone()
        if prod:
            float_text = f"Float: {prod[4]:.4f}" if prod[4] is not None and prod[6] == 'weapon' else "Float: N/A"
            ban_text = "Trade Ban: –î–∞" if prod[5] else "Trade Ban: –ù–µ—Ç"
            type_text = "–¢–∏–ø: –û—Ä—É–∂–∏–µ" if prod[6] == 'weapon' else "–¢–∏–ø: –ê–≥–µ–Ω—Ç"
            user_link = f"@{username}" if message.from_user.username else f"https://t.me/+{user_id}"
            user_text = (f"‚úÖ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n"
                         f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]} (ID: {product_id})\n"
                         f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                         f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                         f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                         f"üî¢ {float_text}\n"
                         f"üö´ {ban_text}\n"
                         f"üéÆ {type_text}\n"
                         f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {trade_link if trade_link else '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}\n"
                         f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_link if product_link else '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}\n\n"
                         f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            await message.answer(user_text, reply_markup=main_kb(user_id))
            admin_text = (f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞!\n"
                          f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]} (ID: {product_id})\n"
                          f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                          f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                          f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                          f"üî¢ {float_text}\n"
                          f"üö´ {ban_text}\n"
                          f"üéÆ {type_text}\n"
                          f"üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://csgosaller-1.onrender.com/admin/product/{product_id}\n"
                          f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {trade_link if trade_link else '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}\n"
                          f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_link if product_link else '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}")
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, admin_text)
                    logging.info(f"–¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É ID{admin_id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")
            c.execute('DELETE FROM pending_requests WHERE user_id=? AND product_id=?', (user_id, product_id))
            conn.commit()
        else:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_kb(user_id))
            c.execute('DELETE FROM pending_requests WHERE user_id=? AND product_id=?', (user_id, product_id))
            conn.commit()
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://steamcommunity.com/tradeoffer/...) –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä (https://csgosaller-1.onrender.com/product/...).", reply_markup=main_kb(user_id))
    conn.close()

async def notify_admins_product(product_id, product_name, description, price, quantity, float_value, trade_ban, product_type, user_id, trade_link=None, product_link=None):
    float_text = f"üî¢ Float: {float_value:.4f}" if float_value is not None and product_type == 'weapon' else "üî¢ Float: N/A"
    ban_text = "üö´ Trade Ban: –î–∞" if trade_ban else "üö´ Trade Ban: –ù–µ—Ç"
    type_text = "üéÆ –¢–∏–ø: –û—Ä—É–∂–∏–µ" if product_type == 'weapon' else "üéÆ –¢–∏–ø: –ê–≥–µ–Ω—Ç"
    user_link = f"ID{user_id}"
    trade_text = f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {trade_link}" if trade_link else "üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: –û–∂–∏–¥–∞–µ—Ç—Å—è"
    product_link_text = f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_link}" if product_link else "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: –û–∂–∏–¥–∞–µ—Ç—Å—è"
    admin_text = (f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä!\n"
                  f"üì¶ –¢–æ–≤–∞—Ä: {product_name} (ID: {product_id})\n"
                  f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                  f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                  f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                  f"üî¢ {float_text}\n"
                  f"üö´ {ban_text}\n"
                  f"üéÆ {type_text}\n"
                  f"üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://csgosaller-1.onrender.com/admin/product/{product_id}\n"
                  f"{trade_text}\n"
                  f"{product_link_text}")
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, admin_text)
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID{admin_id}: {product_name} (ID: {product_id})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")

def notify_admins_auction(lot_id, lot_name, price, winner_id, float_value, trade_ban, lot_type):
    float_text = f"üî¢ Float: {float_value:.4f}" if float_value is not None and lot_type == 'weapon' else "üî¢ Float: N/A"
    ban_text = "üö´ Trade Ban: –î–∞" if trade_ban else "üö´ Trade Ban: –ù–µ—Ç"
    type_text = "üéÆ –¢–∏–ø: –û—Ä—É–∂–∏–µ" if lot_type == 'weapon' else "üéÆ –¢–∏–ø: –ê–≥–µ–Ω—Ç"
    winner_text = f"üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ID{winner_id}" if winner_id else "üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ù–µ—Ç —Å—Ç–∞–≤–æ–∫"
    text = (f"üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"üì¶ –õ–æ—Ç: {lot_name} (ID: {lot_id})\n"
            f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ\n"
            f"{winner_text}\n"
            f"{float_text}\n"
            f"{ban_text}\n"
            f"{type_text}")
    for admin_id in ADMIN_IDS:
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(bot.send_message(admin_id, text))
            loop.close()
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID{admin_id}: {lot_name} (ID: {lot_id})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")

def run_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    dp.run_polling(bot)