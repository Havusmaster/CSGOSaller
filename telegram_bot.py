import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ‚ÄúüöÄ Start‚Äù
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üöÄ Start")]
        ]
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üöÄ Start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ‚ÄúüöÄ Start‚Äù
@dp.message(F.text == "üöÄ Start")
async def handle_start_button(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")],
            [InlineKeyboardButton(text="O'zbek üá∫üáø", callback_data="lang_uz")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ‚Äî –†–£–°–°–ö–ò–ô
@dp.callback_query(F.data == "lang_ru")
async def lang_ru(callback: types.CallbackQuery):
    shop_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="open_shop")]
        ]
    )
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.",
        reply_markup=shop_button
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ‚Äî –£–ó–ë–ï–ö–°–ö–ò–ô
@dp.callback_query(F.data == "lang_uz")
async def lang_uz(callback: types.CallbackQuery):
    shop_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí Do‚Äòkonga o‚Äòtish", callback_data="open_shop")]
        ]
    )
    await callback.message.answer(
        "Salom! üëã\n\nBot-do‚Äòkonimizga xush kelibsiz. Bu yerda siz mahsulotlarni ko‚Äòrishingiz va buyurtma berishingiz mumkin.",
        reply_markup=shop_button
    )
    await callback.answer()


# –ö–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (–ø—Ä–∏–º–µ—Ä)
@dp.callback_query(F.data == "open_shop")
async def open_shop(callback: types.CallbackQuery):
    await callback.message.answer("üõç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∞–∑–∏–Ω. (–ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏)")
    await callback.answer()


# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook –æ—Ç–∫–ª—é—á—ë–Ω –∏ —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã.")

        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(run_bot())
