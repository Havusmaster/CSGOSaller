import sqlite3
import logging
import time
import re
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_USERNAME = "UzSaler"  # –ò–º—è –±–æ—Ç–∞ –±–µ–∑ @
ADMIN_IDS = [1939282952, 5266027747]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_USERNAME = "UzSaler"  # –ò–º—è –∞–¥–º–∏–Ω–∞ –±–µ–∑ @ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
DB_PATH = "auction_shop.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="bot.log", level=logging.INFO, format="%(asctime)s %(message)s")

def main_kb(user_id=None):
    if user_id in ADMIN_IDS:
        return types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [
                types.KeyboardButton(
                    text="üõí –ú–∞–≥–∞–∑–∏–Ω",
                    web_app=types.WebAppInfo(url=f"https://csgosaller-1.onrender.com/?user_id={user_id}")
                )
            ]
        ])
    else:
        return types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [
                types.KeyboardButton(
                    text="üõí –ú–∞–≥–∞–∑–∏–Ω",
                    web_app=types.WebAppInfo(url="https://csgosaller-1.onrender.com/")
                )
            ]
        ])

async def start_bot(token):
    bot = Bot(token=token)
    dp = Dispatcher()

    @dp.message(Command("start"))
    async def start_cmd(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or f"ID{user_id}"
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("product_"):
            try:
                product_id = int(args[1].replace("product_", ""))
                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start product_{product_id} –¥–ª—è user_id: {user_id}, username: {username}")
                conn = sqlite3.connect(DB_PATH)
                c = conn.cursor()
                c.execute('SELECT name, description, price, quantity, float_value, trade_ban, type FROM products WHERE id=? AND sold=0 AND quantity>0', (product_id,))
                prod = c.fetchone()
                if prod:
                    float_text = f"Float: {prod[4]:.4f}" if prod[4] is not None and prod[6] == 'weapon' else "Float: N/A"
                    ban_text = "Trade Ban: –î–∞" if prod[5] else "Trade Ban: –ù–µ—Ç"
                    type_text = "–¢–∏–ø: –û—Ä—É–∂–∏–µ" if prod[6] == 'weapon' else "–¢–∏–ø: –ê–≥–µ–Ω—Ç"
                    text = (f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]}\n"
                            f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                            f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                            f"üî¢ {float_text}\n"
                            f"üö´ {ban_text}\n"
                            f"üéÆ {type_text}\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
                    admin_url = f"https://t.me/{ADMIN_USERNAME}" if not ADMIN_USERNAME.startswith('+') else f"https://t.me/{ADMIN_USERNAME}"
                    await message.answer(text, reply_markup=types.ReplyKeyboardMarkup(
                        resize_keyboard=True,
                        keyboard=[
                            [types.KeyboardButton(text="üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=types.WebAppInfo(url="https://csgosaller-1.onrender.com/shop"))]
                        ]
                    ))
                    user_link = f"@{username}" if message.from_user.username else f"https://t.me/+{user_id}"
                    admin_text = (f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Ç–æ–≤–∞—Ä–µ!\n"
                                  f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]} (ID: {product_id})\n"
                                  f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                                  f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                                  f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                                  f"üî¢ {float_text}\n"
                                  f"üö´ {ban_text}\n"
                                  f"üéÆ {type_text}\n"
                                  f"üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: https://csgosaller-1.onrender.com/admin/product/{product_id}\n"
                                  f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞...")
                    for admin_id in ADMIN_IDS:
                        try:
                            await bot.send_message(admin_id, admin_text)
                            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID{admin_id} –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")
                    c.execute('INSERT OR REPLACE INTO pending_requests (user_id, product_id, timestamp) VALUES (?, ?, ?)',
                              (user_id, product_id, int(time.time())))
                    conn.commit()
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID{user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id}: {prod[0]}")
                else:
                    await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=main_kb(user_id))
                conn.close()
            except Exception as e:
                if 'conn' in locals():
                    conn.close()
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start product_{product_id}: {str(e)}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_kb(user_id))
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_kb(user_id))

    @dp.message()
    async def handle_trade_link(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or f"ID{user_id}"
        text = message.text.strip()
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('SELECT product_id FROM pending_requests WHERE user_id=? AND timestamp>?', (user_id, int(time.time()) - 300))
        request = c.fetchone()
        if request:
            product_id = request[0]
            if re.match(r'^https://steamcommunity\.com/tradeoffer/.*', text):
                c.execute('SELECT name, description, price, quantity, float_value, trade_ban, type FROM products WHERE id=?', (product_id,))
                prod = c.fetchone()
                if prod:
                    float_text = f"Float: {prod[4]:.4f}" if prod[4] is not None and prod[6] == 'weapon' else "Float: N/A"
                    ban_text = "Trade Ban: –î–∞" if prod[5] else "Trade Ban: –ù–µ—Ç"
                    type_text = "–¢–∏–ø: –û—Ä—É–∂–∏–µ" if prod[6] == 'weapon' else "–¢–∏–ø: –ê–≥–µ–Ω—Ç"
                    user_link = f"@{username}" if message.from_user.username else f"https://t.me/+{user_id}"
                    admin_text = (f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞!\n"
                                  f"üì¶ –¢–æ–≤–∞—Ä: {prod[0]} (ID: {product_id})\n"
                                  f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prod[1]}\n"
                                  f"üí∞ –¶–µ–Ω–∞: {prod[2]}‚ÇΩ\n"
                                  f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prod[3]}\n"
                                  f"üî¢ {float_text}\n"
                                  f"üö´ {ban_text}\n"
                                  f"üéÆ {type_text}\n"
                                  f"üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: https://csgosaller-1.onrender.com/admin/product/{product_id}\n"
                                  f"üîó –¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: {text}")
                    for admin_id in ADMIN_IDS:
                        try:
                            await bot.send_message(admin_id, admin_text)
                            logging.info(f"–¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É ID{admin_id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")
                    await message.answer("‚úÖ –í–∞—à–∞ —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_kb(user_id))
                    c.execute('DELETE FROM pending_requests WHERE user_id=? AND product_id=?', (user_id, product_id))
                    conn.commit()
                else:
                    await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_kb(user_id))
                    c.execute('DELETE FROM pending_requests WHERE user_id=? AND product_id=?', (user_id, product_id))
                    conn.commit()
            else:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://steamcommunity.com/tradeoffer/...).", reply_markup=main_kb(user_id))
            conn.close()
        else:
            conn.close()

    async def notify_admins_auction(lot_id, lot_name, price, winner_id, float_value, trade_ban, lot_type):
        float_text = f"üî¢ Float: {float_value:.4f}" if float_value is not None and lot_type == 'weapon' else "üî¢ Float: N/A"
        ban_text = "üö´ Trade Ban: –î–∞" if trade_ban else "üö´ Trade Ban: –ù–µ—Ç"
        type_text = "üéÆ –¢–∏–ø: –û—Ä—É–∂–∏–µ" if lot_type == 'weapon' else "üéÆ –¢–∏–ø: –ê–≥–µ–Ω—Ç"
        winner_text = f"üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ID{winner_id}" if winner_id else "üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ù–µ—Ç —Å—Ç–∞–≤–æ–∫"
        text = (f"üèÜ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                f"üì¶ –õ–æ—Ç: {lot_name} (ID: {lot_id})\n"
                f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ\n"
                f"{winner_text}\n"
                f"{float_text}\n"
                f"{ban_text}\n"
                f"{type_text}")
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, text)
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ID{admin_id}: {lot_name} (ID: {lot_id})")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ID{admin_id}: {e}")

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)