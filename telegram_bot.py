import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from config import BOT_TOKEN

# üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
WEBHOOK_HOST = "https://csgosaller-1.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Render-–¥–æ–º–µ–Ω
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)


# === /start –∫–æ–º–∞–Ω–¥–∞ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ Start")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üöÄ Start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=keyboard
    )


# === –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚ÄúüöÄ Start‚Äù ===
@dp.message(F.text == "üöÄ Start")
async def handle_start_button(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")],
            [InlineKeyboardButton(text="O'zbek üá∫üáø", callback_data="lang_uz")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:", reply_markup=keyboard)


# === –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π ===
@dp.callback_query(F.data == "lang_ru")
async def lang_ru(callback: types.CallbackQuery):
    shop_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="open_shop")]
        ]
    )
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.",
        reply_markup=shop_button
    )
    await callback.answer()


# === –Ø–∑—ã–∫: –£–∑–±–µ–∫—Å–∫–∏–π ===
@dp.callback_query(F.data == "lang_uz")
async def lang_uz(callback: types.CallbackQuery):
    shop_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí Do‚Äòkonga o‚Äòtish", callback_data="open_shop")]
        ]
    )
    await callback.message.answer(
        "Salom! üëã\n\nBot-do‚Äòkonimizga xush kelibsiz. Bu yerda siz mahsulotlarni ko‚Äòrishingiz va buyurtma berishingiz mumkin.",
        reply_markup=shop_button
    )
    await callback.answer()


# === –ö–Ω–æ–ø–∫–∞ ‚Äú–ú–∞–≥–∞–∑–∏–Ω‚Äù ===
@dp.callback_query(F.data == "open_shop")
async def open_shop(callback: types.CallbackQuery):
    await callback.message.answer("üõç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞–≥–∞–∑–∏–Ω. (–ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏)")
    await callback.answer()


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook ===
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω –∏ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ ===
async def handle_webhook(request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    return web.Response()


# === –°–æ–∑–¥–∞–Ω–∏–µ aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ bot.py) ===
async def run_bot():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=10000)
    logging.info("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook –Ω–∞ –ø–æ—Ä—Ç—É 10000.")
    await site.start()
    await asyncio.Event().wait()  # –¥–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
