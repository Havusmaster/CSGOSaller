import os
import logging
import sqlite3
from flask import Flask, render_template_string, request, redirect, url_for, session
from templates import TAILWIND
from config import ADMIN_IDS, BOT_USERNAME, ADMIN_USERNAME
from database import DB_PATH
from telegram_bot import bot
import asyncio
import time

logging.basicConfig(filename="bot.log", level=logging.INFO, format="%(asctime)s %(message)s")

app = Flask(__name__)
app.secret_key = "supersecretkey"
app.config['UPLOAD_FOLDER'] = 'static/images/'
app.config['DEBUG'] = True
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Translations dictionary
TRANSLATIONS = {
    'ru': {
        'title': 'CSGO Saller',
        'welcome_title': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        'welcome_message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ CSGO Saller! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–∫–∏–Ω—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π.',
        'home': 'üè† –ì–ª–∞–≤–Ω–∞—è',
        'shop': 'üõí –ú–∞–≥–∞–∑–∏–Ω',
        'auction': 'üèÜ –ê—É–∫—Ü–∏–æ–Ω',
        'admin_panel': 'üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
        'back': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        'shop_title': '–ú–∞–≥–∞–∑–∏–Ω',
        'product_not_found': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        'product_id': '–¢–æ–≤–∞—Ä ID',
        'price': 'üí∞ –¶–µ–Ω–∞',
        'quantity': 'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        'float': 'üî¢ Float',
        'trade_ban': 'üö´ Trade Ban',
        'type': 'üéÆ –¢–∏–ø',
        'product_link': 'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä',
        'send_to_admin': 'üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram!',
        'contact_admin': 'üì© –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É',
        'return_to_shop': '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω',
        'buy_error_no_id': '–û—à–∏–±–∫–∞: ID —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.',
        'buy_error_unavailable': '–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
        'buy_success': '‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!',
        'auction_title': '–ê—É–∫—Ü–∏–æ–Ω',
        'lot_unavailable': '–õ–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
        'bid_too_low': '–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.',
        'current_bid': 'üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞',
        'time_left': '‚è≥ –î–æ –∫–æ–Ω—Ü–∞',
        'bid_step': 'üîº –°—Ç–∞–≤–∫–∞ +',
        'custom_bid': 'üí∏ –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É',
        'bid_placeholder': '–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (‚ÇΩ)',
        'no_limit': '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
        'weapon': '–û—Ä—É–∂–∏–µ',
        'agent': '–ê–≥–µ–Ω—Ç',
        'yes': '–î–∞',
        'no': '–ù–µ—Ç',
        'na': 'N/A',
        'language': '–Ø–∑—ã–∫',
        'russian': '–†—É—Å—Å–∫–∏–π',
        'uzbek': 'O‚Äòzbek'
    },
    'uz': {
        'title': 'CSGO Saller',
        'welcome_title': 'Xush kelibsiz!',
        'welcome_message': 'CSGO Saller‚Äôga tashrif buyurganingiz uchun rahmat! Bu yerda siz skinlarni sotib olishingiz, auktsionlarda ishtirok etishingiz va xavfsiz savdo qilishingiz mumkin.',
        'home': 'üè† Bosh sahifa',
        'shop': 'üõí Do‚Äòkon',
        'auction': 'üèÜ Auktsion',
        'admin_panel': 'üîë Admin paneli',
        'back': '‚¨ÖÔ∏è Orqaga',
        'shop_title': 'Do‚Äòkon',
        'product_not_found': 'Mahsulot topilmadi.',
        'product_id': 'Mahsulot ID',
        'price': 'üí∞ Narx',
        'quantity': 'üì¶ Soni',
        'float': 'üî¢ Float',
        'trade_ban': 'üö´ Savdo taqiqlangan',
        'type': 'üéÆ Turi',
        'product_link': 'üîó Mahsulot havolasi',
        'send_to_admin': 'üìã Ushbu havolani va savdo havolangizni Telegram orqali administratorga yuboring!',
        'contact_admin': 'üì© Administratorga yozish',
        'return_to_shop': '‚¨ÖÔ∏è Do‚Äòkonga qaytish',
        'buy_error_no_id': 'Xato: Mahsulot ID kiritilmagan.',
        'buy_error_unavailable': 'Mahsulot mavjud emas.',
        'buy_success': '‚úÖ Sotib olish so‚Äòrovi administratorga yuborildi!',
        'auction_title': 'Auktsion',
        'lot_unavailable': 'Lot mavjud emas.',
        'bid_too_low': 'Summa juda past.',
        'current_bid': 'üí∞ Joriy stavka',
        'time_left': '‚è≥ Tugash vaqti',
        'bid_step': 'üîº Stavka +',
        'custom_bid': 'üí∏ Summa kiritish',
        'bid_placeholder': 'Sizning stavkangiz (‚ÇΩ)',
        'no_limit': 'Cheklovsiz',
        'weapon': 'Qurol',
        'agent': 'Agent',
        'yes': 'Ha',
        'no': 'Yo‚Äòq',
        'na': 'Mavjud emas',
        'language': 'Til',
        'russian': 'Ruscha',
        'uzbek': 'O‚Äòzbek'
    }
}

@app.route('/login', methods=['GET', 'POST'])
def login():
    user_id = session.get('user_id', None)
    lang = request.args.get('lang', 'ru')
    logging.info(f"Login route: user_id={user_id}, lang={lang}")
    if user_id in ADMIN_IDS:
        logging.info("User is admin, redirecting to /admin/products")
        return redirect(url_for('admin_products', lang=lang))
    logging.info("User not admin, redirecting to /")
    return redirect(url_for('index', lang=lang))

@app.route('/')
def index():
    user_id = session.get('user_id', None)
    lang = request.args.get('lang', 'ru')
    if lang not in ['ru', 'uz']:
        lang = 'ru'
    logging.info(f"Index route: session user_id={user_id}, query user_id={request.args.get('user_id', None)}, lang={lang}")
    if not user_id:
        user_id = request.args.get('user_id', None)
        if user_id:
            try:
                user_id = int(user_id)
                session['user_id'] = user_id
                logging.info(f"Set session user_id: {user_id}")
            except:
                user_id = None
                logging.error("Failed to parse user_id from query")
    t = TRANSLATIONS[lang]
    show_welcome = request.args.get('show_welcome', 'false') == 'true'
    html = TAILWIND + """
    <div class="container mx-auto pt-12 pb-10 px-4 text-center bg-gradient-to-b from-gray-900 to-gray-800 min-h-screen">
      <header class="flex justify-between items-center mb-8">
        <h1 class="text-4xl md:text-5xl font-extrabold text-orange-500 animate-pulse">{}</h1>
        <div class="relative">
          <select ...(truncated 25280 characters)... html
    except Exception as e:
        if 'conn' in locals():
            conn.close()
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /auction: {str(e)}")
        return TAILWIND + """
        <div class="container mx-auto pt-12 pb-10 px-4 bg-gradient-to-b from-gray-900 to-gray-800 min-h-screen">
            <header class="flex justify-between items-center mb-8">
              <div></div>
              <div class="relative">
                <select onchange="window.location.href='/auction?lang='+this.value" class="bg-gray-700 text-white p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500">
                  <option value="ru" {}>{}</option>
                  <option value="uz" {}>{}</option>
                </select>
              </div>
            </header>
            <div class="bg-red-600 text-white p-4 rounded-lg shadow-lg">{}: {}</div>
            <a href="/?lang={}" class="bg-gray-800 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-700 transform hover:scale-105 transition duration-300 btn mt-4 block text-center">{}</a>
        </div>
        """.format(
            'selected' if lang == 'ru' else '',
            t['russian'],
            'selected' if lang == 'uz' else '',
            t['uzbek'],
            t['buy_error_unavailable'],
            str(e),
            lang,
            t['back']
        )

@app.route('/bid', methods=['POST'])
def bid():
    lang = request.form.get('lang', 'ru')
    if lang not in ['ru', 'uz']:
        lang = 'ru'
    t = TRANSLATIONS[lang]
    user_id = session.get('user_id', None)
    if not user_id:
        return redirect(url_for('login', lang=lang))
    lot_id = int(request.form['lot_id'])
    step = int(request.form['step'])
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT current_price, end_time FROM lots WHERE id=? AND active=1', (lot_id,))
    lot = c.fetchone()
    if not lot:
        conn.close()
        return TAILWIND + """
        <div class="container mx-auto pt-12 pb-10 px-4 bg-gradient-to-b from-gray-900 to-gray-800 min-h-screen">
            <header class="flex justify-between items-center mb-8">
              <div></div>
              <div class="relative">
                <select onchange="window.location.href='/auction?lang='+this.value" class="bg-gray-700 text-white p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500">
                  <option value="ru" {}>{}</option>
                  <option value="uz" {}>{}</option>
                </select>
              </div>
            </header>
            <div class="bg-red-600 text-white p-4 rounded-lg shadow-lg">{}</div>
            <a href="/auction?lang={}" class="bg-gray-800 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-700 transform hover:scale-105 transition duration-300 btn mt-4 block text-center">{}</a>
        </div>
        """.format(
            'selected' if lang == 'ru' else '',
            t['russian'],
            'selected' if lang == 'uz' else '',
            t['uzbek'],
            t['lot_unavailable'],
            lang,
            t['back']
        )
    new_price = lot[0] + step
    c.execute('UPDATE lots SET current_price=? WHERE id=?', (new_price, lot_id))
    c.execute('INSERT INTO bids (lot_id, user_id, amount, time) VALUES (?, ?, ?, ?)', (lot_id, user_id, new_price, int(time.time())))
    conn.commit()
    conn.close()
    logging.info(f"–°—Ç–∞–≤–∫–∞: –õ–æ—Ç {lot_id}, {new_price}, {user_id}")
    return redirect(url_for('auction', lang=lang))

@app.route('/bid_custom', methods=['POST'])
def bid_custom():
    lang = request.form.get('lang', 'ru')
    if lang not in ['ru', 'uz']:
        lang = 'ru'
    t = TRANSLATIONS[lang]
    user_id = session.get('user_id', None)
    if not user_id:
        return redirect(url_for('login', lang=lang))
    lot_id = int(request.form['lot_id'])
    amount = int(request.form['amount'])
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT current_price, end_time, step FROM lots WHERE id=? AND active=1', (lot_id,))
    lot = c.fetchone()
    if not lot or amount < lot[0] + lot[2]:
        conn.close()
        return TAILWIND + """
        <div class="container mx-auto pt-12 pb-10 px-4 bg-gradient-to-b from-gray-900 to-gray-800 min-h-screen">
            <header class="flex justify-between items-center mb-8">
              <div></div>
              <div class="relative">
                <select onchange="window.location.href='/auction?lang='+this.value" class="bg-gray-700 text-white p-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500">
                  <option value="ru" {}>{}</option>
                  <option value="uz" {}>{}</option>
                </select>
              </div>
            </header>
            <div class="bg-red-600 text-white p-4 rounded-lg shadow-lg">{}</div>
            <a href="/auction?lang={}" class="bg-gray-800 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-700 transform hover:scale-105 transition duration-300 btn mt-4 block text-center">{}</a>
        </div>
        """.format(
            'selected' if lang == 'ru' else '',
            t['russian'],
            'selected' if lang == 'uz' else '',
            t['uzbek'],
            t['bid_too_low'],
            lang,
            t['back']
        )
    c.execute('UPDATE lots SET current_price=? WHERE id=?', (amount, lot_id))
    c.execute('INSERT INTO bids (lot_id, user_id, amount, time) VALUES (?, ?, ?, ?)', (lot_id, user_id, amount, int(time.time())))
    conn.commit()
    conn.close()
    logging.info(f"–°—Ç–∞–≤–∫–∞: –õ–æ—Ç {lot_id}, {amount}, {user_id}")
    return redirect(url_for('auction', lang=lang))

# –í–æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: –¥–æ–±–∞–≤–∏–ª persistent disk –≤ render.yaml (—á—Ç–æ–±—ã db –Ω–µ —Å—Ç–∏—Ä–∞–ª–∞—Å—å), –∏–∑–º–µ–Ω–∏–ª DB_PATH –≤ database.py, –¥–æ–±–∞–≤–∏–ª –≤—ã–∑–æ–≤ init_db() –≤ bot.py (—á—Ç–æ–±—ã —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ). –í webapp.py —Ä–∞—Å—à–∏—Ä–∏–ª except –≤ /shop, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö, –∞ –Ω–µ 500.
# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (admin_routes.py, config.py, telegram_bot.py, templates.py) –Ω–µ –º–µ–Ω—è–ª, –æ–Ω–∏ –∫–∞–∫ –≤ —Ç–≤–æ–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
# –¢–µ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ: python bot.py, –∑–∞–π–¥–∏ –Ω–∞ /shop. –ï—Å–ª–∏ –æ–∫ ‚Äî push –Ω–∞ Render –∏ redeploy. –ï—Å–ª–∏ logs –ø–æ–∫–∞–∂—É—Ç —á—Ç–æ-—Ç–æ ‚Äî –∫–∏–Ω—å.