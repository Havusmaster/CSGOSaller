# webapp.py
"""
Flask WebApp —Å –º–∞–≥–∞–∑–∏–Ω–æ–º, –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é.
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ Bootstrap 5, —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞.
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ ‚Äî –≤–≤–æ–¥ Telegram ID (—Å–≤–µ—Ä—è–µ—Ç—Å—è —Å ADMIN_IDS).
"""

from flask import Flask, render_template_string, request, redirect, url_for, session, flash
from config import FLASK_SECRET, APP_URL
from database import get_products, get_product, get_auctions, get_bids_for_auction, place_bid, get_highest_bid, get_auction
from admin import is_admin, admin_add_product, admin_get_products, admin_delete_product, admin_mark_sold, admin_create_auction, admin_get_auctions, admin_get_bids
import time

app = Flask(__name__)
app.secret_key = FLASK_SECRET

# >>> –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ñ–∞–π–ª—ã). –î–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ ‚Äî inline —à–∞–±–ª–æ–Ω—ã.
BASE_HTML = """
<!doctype html>
<html lang="ru">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>CSsaler ‚Äî –ú–∞–≥–∞–∑–∏–Ω –∏ –ê—É–∫—Ü–∏–æ–Ω</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
      body { background: #f8fafc; }
      .card { border-radius: 14px; }
      .tg-btn { text-decoration: none; }
      .shadow-soft { box-shadow: 0 6px 18px rgba(0,0,0,0.08); }
      .hover-grow:hover { transform: translateY(-4px); transition: .18s; }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm mb-4">
      <div class="container">
        <a class="navbar-brand" href="/">üõçÔ∏è CSsaler</a>
        <div>
          <a class="btn btn-outline-primary me-2" href="/">–ú–∞–≥–∞–∑–∏–Ω</a>
          <a class="btn btn-outline-success me-2" href="/auctions">–ê—É–∫—Ü–∏–æ–Ω—ã</a>
          <a class="btn btn-outline-dark" href="/admin">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</a>
        </div>
      </div>
    </nav>
    <div class="container">
      {% with messages = get_flashed_messages() %}
        {% if messages %}
          <div class="mb-3">
            {% for m in messages %}
              <div class="alert alert-info">{{ m }}</div>
            {% endfor %}
          </div>
        {% endif %}
      {% endwith %}
      {{ content }}
    </div>
    <footer class="text-center mt-5 mb-5 text-muted">¬© CSsaler ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –∏ –∞—É–∫—Ü–∏–æ–Ω</footer>
  </body>
</html>
"""

# ----- –ú–∞–≥–∞–∑–∏–Ω -----
@app.route("/")
def index():
    products = get_products(only_available=True)
    cards = ""
    for p in products:
        float_info = f"<div class='text-muted small'>Float: {p['float_value']}</div>" if p['type']=='weapon' and p['float_value'] else ""
        link_button = f"<a class='btn btn-sm btn-outline-primary' href='{p['link'] or '#'}' target='_blank'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç</a>" if p.get('link') else ""
        # tg link to admin by id (opens profile)
        admin_link = f"tg://user?id={ (request.args.get('admin_default') or '') }"  # placeholder - user will click and choose admin in bot
        cards += f"""
        <div class="col-md-4 mb-4">
          <div class="card p-3 shadow-soft hover-grow">
            <h5>üì¶ {p['name']}</h5>
            <p class="small text-muted">{p['description']}</p>
            <div class="fw-bold">üí∞ {p['price']}</div>
            <div class="small text-muted">–¢–∏–ø: {'üî´ –û—Ä—É–∂–∏–µ' if p['type']=='weapon' else 'üíº –ê–≥–µ–Ω—Ç'}</div>
            {float_info}
            <div class="mt-3 d-flex justify-content-between">
              <a class="btn btn-primary" href="tg://resolve?domain=YOUR_BOT_USERNAME&start=buy_{p['id']}">üõí –ö—É–ø–∏—Ç—å</a>
              {link_button}
              <a class="btn btn-outline-secondary" href="tg://user?id={request.args.get('admin_id', '')}">üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É</a>
            </div>
          </div>
        </div>
        """
    content = f"""
    <div class="row">
      {cards or '<div class="alert alert-warning">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</div>'}
    </div>
    """
    return render_template_string(BASE_HTML, content=content)

# ----- –ê—É–∫—Ü–∏–æ–Ω—ã -----
@app.route("/auctions")
def auctions():
    auctions = get_auctions(only_active=True)
    cards = ""
    for a in auctions:
        now = int(time.time())
        remaining = a['end_timestamp'] - now
        minutes = remaining // 60 if remaining>0 else 0
        highest = get_highest_bid(a['id'])
        highest_str = f"{highest['amount']} ({highest['bidder_identifier']})" if highest else "–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫"
        cards += f"""
        <div class="col-md-6 mb-4">
          <div class="card p-3 shadow-soft hover-grow">
            <h5>üè∑Ô∏è {a['title']}</h5>
            <p class="small text-muted">{a['description']}</p>
            <div class="small">–°—Ç–∞—Ä—Ç: {a['start_price']}, –®–∞–≥: {a['step']}</div>
            <div class="fw-bold mt-2">–¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º: {highest_str}</div>
            <div class="text-muted small">–û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω</div>
            <form method="post" action="/auction/{a['id']}/bid" class="mt-3 d-flex">
              <input name="bidder" class="form-control me-2" placeholder="@username –∏–ª–∏ ID" required>
              <input name="amount" class="form-control me-2" placeholder="–°—É–º–º–∞" type="number" step="0.01" required>
              <button class="btn btn-success">–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</button>
            </form>
          </div>
        </div>
        """
    content = f"""
    <div class="row">
      {cards or '<div class="alert alert-info">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤</div>'}
    </div>
    """
    return render_template_string(BASE_HTML, content=content)

@app.route("/auction/<int:auction_id>/bid", methods=["POST"])
def auction_bid(auction_id):
    bidder = request.form.get("bidder")
    amount = request.form.get("amount")
    if not bidder or not amount:
        flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è ‚úçÔ∏è")
        return redirect(url_for("auctions"))
    try:
        amount = float(amount)
    except:
        flash("–°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ ‚ùå")
        return redirect(url_for("auctions"))
    place_bid(auction_id, bidder, amount)
    flash("‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    return redirect(url_for("auctions"))

# ----- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å -----
@app.route("/admin", methods=["GET", "POST"])
def admin_panel():
    # –ø—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥: —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID
    if request.method == "POST":
        tid = request.form.get("telegram_id")
        if tid and is_admin(tid):
            session['admin_id'] = int(tid)
            flash("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return redirect(url_for("admin_dashboard"))
        else:
            flash("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
            return redirect(url_for("admin_panel"))
    content = """
    <div class="card p-4">
      <h4>üîí –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h4>
      <form method="post">
        <div class="mb-3">
          <label class="form-label">Telegram ID (—Ü–∏—Ñ—Ä—ã)</label>
          <input name="telegram_id" class="form-control" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID">
        </div>
        <button class="btn btn-primary">–í–æ–π—Ç–∏</button>
      </form>
      <div class="mt-3 text-muted small">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ Telegram ID</div>
    </div>
    """
    return render_template_string(BASE_HTML, content=content)

@app.route("/admin/dashboard")
def admin_dashboard():
    if not session.get('admin_id') or not is_admin(session.get('admin_id')):
        flash("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞")
        return redirect(url_for("admin_panel"))
    prods = admin_get_products()
    auctions_all = admin_get_auctions()
    # Forms for add product and create auction
    content = f"""
    <div class="row">
      <div class="col-md-6">
        <div class="card p-3 mb-3 shadow-soft">
          <h5>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h5>
          <form method="post" action="/admin/add_product">
            <input name="name" class="form-control mb-2" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" required>
            <textarea name="description" class="form-control mb-2" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea>
            <input name="price" class="form-control mb-2" placeholder="–¶–µ–Ω–∞" required type="number" step="0.01">
            <select name="type" class="form-control mb-2">
              <option value="agent">üíº –ê–≥–µ–Ω—Ç</option>
              <option value="weapon">üî´ –û—Ä—É–∂–∏–µ</option>
            </select>
            <input name="float_value" class="form-control mb-2" placeholder="Float (–µ—Å–ª–∏ –æ—Ä—É–∂–∏–µ)">
            <input name="link" class="form-control mb-2" placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)">
            <button class="btn btn-success">–î–æ–±–∞–≤–∏—Ç—å</button>
          </form>
        </div>

        <div class="card p-3 shadow-soft">
          <h5>üèÜ –°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω</h5>
          <form method="post" action="/admin/create_auction">
            <input name="title" class="form-control mb-2" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞" required>
            <textarea name="description" class="form-control mb-2" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"></textarea>
            <input name="start_price" class="form-control mb-2" placeholder="–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞" required type="number" step="0.01">
            <input name="step" class="form-control mb-2" placeholder="–®–∞–≥ —Å—Ç–∞–≤–∫–∏" required type="number" step="0.01">
            <input name="duration_minutes" class="form-control mb-2" placeholder="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã)" required type="number" value="60">
            <button class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω</button>
          </form>
        </div>
      </div>

      <div class="col-md-6">
        <div class="card p-3 mb-3 shadow-soft">
          <h5>üì¶ –¢–æ–≤–∞—Ä—ã</h5>
          {''.join([
            f\"\"\"
            <div class='border p-2 mb-2 rounded'>
              <div class='d-flex justify-content-between'>
                <div>
                  <strong>üì¶ {p['name']}</strong> ‚Äî {p['price']}<br>
                  <small class='text-muted'>{p['description']}</small>
                </div>
                <div>
                  <a href='/admin/delete_product/{p['id']}' class='btn btn-sm btn-danger mb-1'>–£–¥–∞–ª–∏—Ç—å</a>
                  <a href='/admin/mark_sold/{p['id']}' class='btn btn-sm btn-outline-success mb-1'>–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–æ</a><br>
                  <a class='btn btn-sm btn-outline-secondary' href='tg://user?id={{session.get(\"admin_id\")}}'>üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É</a>
                </div>
              </div>
            </div>
            \"\"\" for p in prods
          ])}
        </div>

        <div class="card p-3 shadow-soft">
          <h5>‚öîÔ∏è –ê—É–∫—Ü–∏–æ–Ω—ã (–≤—Å–µ)</h5>
          {''.join([
            f\"\"\"
            <div class='border p-2 mb-2 rounded'>
              <strong>üè∑ {a['title']}</strong> ‚Äî –°—Ç–∞—Ä—Ç {a['start_price']} ‚Äî –ö–æ–Ω–µ—Ü: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(a['end_timestamp']))}<br>
              <a href='/admin/auction/{a['id']}/bids' class='btn btn-sm btn-outline-primary mt-2'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏</a>
            </div>
            \"\"\" for a in auctions_all
          ])}
        </div>
      </div>
    </div>
    """
    return render_template_string(BASE_HTML, content=content)

@app.route("/admin/add_product", methods=["POST"])
def admin_add_product_route():
    if not session.get('admin_id') or not is_admin(session.get('admin_id')):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return redirect(url_for("admin_panel"))
    form = request.form
    admin_add_product(form)
    flash("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    return redirect(url_for("admin_dashboard"))

@app.route("/admin/delete_product/<int:product_id>")
def admin_delete_product_route(product_id):
    if not session.get('admin_id') or not is_admin(session.get('admin_id')):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return redirect(url_for("admin_panel"))
    admin_delete_product(product_id)
    flash("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
    return redirect(url_for("admin_dashboard"))

@app.route("/admin/mark_sold/<int:product_id>")
def admin_mark_sold_route(product_id):
    if not session.get('admin_id') or not is_admin(session.get('admin_id')):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return redirect(url_for("admin_panel"))
    admin_mark_sold(product_id)
    flash("‚úÖ –¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–æ")
    return redirect(url_for("admin_dashboard"))

@app.route("/admin/create_auction", methods=["POST"])
def admin_create_auction_route():
    if not session.get('admin_id') or not is_admin(session.get('admin_id')):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return redirect(url_for("admin_panel"))
    admin_create_auction(request.form)
    flash("üèÅ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω")
    return redirect(url_for("admin_dashboard"))

@app.route("/admin/auction/<int:auction_id>/bids")
def admin_view_bids(auction_id):
    if not session.get('admin_id') or not is_admin(session.get('admin_id')):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return redirect(url_for("admin_panel"))
    bids = admin_get_bids(auction_id)
    rows = ""
    for b in bids:
        rows += f"<tr><td>{b['id']}</td><td>{b['bidder_identifier']}</td><td>{b['amount']}</td><td>{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(b['created_at']))}</td></tr>"
    content = f"""
    <div class="card p-3">
      <h5>–°—Ç–∞–≤–∫–∏ –ø–æ –ª–æ—Ç—É #{auction_id}</h5>
      <table class="table">
        <thead><tr><th>#</th><th>–£—á–∞—Å—Ç–Ω–∏–∫</th><th>–°—É–º–º–∞</th><th>–í—Ä–µ–º—è</th></tr></thead>
        <tbody>
        {rows or '<tr><td colspan=4>–ù–µ—Ç —Å—Ç–∞–≤–æ–∫</td></tr>'}
        </tbody>
      </table>
      <a class="btn btn-secondary" href="/admin/dashboard">–ù–∞–∑–∞–¥</a>
    </div>
    """
    return render_template_string(BASE_HTML, content=content)

# –ü—Ä–æ—Å—Ç–æ–π keep-alive endpoint
@app.route("/health")
def health():
    return "OK", 200

# –≠–∫—Å–ø–æ—Ä—Ç Flask app –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ bot.py
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ (–æ–±—ã—á–Ω–æ –º—ã –≤ bot.py –∑–∞–ø—É—Å–∫–∞–µ–º)
    app.run(host="0.0.0.0", port=5000)
